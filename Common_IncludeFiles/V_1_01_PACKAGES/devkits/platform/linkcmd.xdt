%/* --COPYRIGHT--,EPL
% *  Copyright (c) 2010 Texas Instruments and others.
% *  All rights reserved. This program and the accompanying materials
% *  are made available under the terms of the Eclipse Public License v1.0
% *  which accompanies this distribution, and is available at
% *  http://www.eclipse.org/legal/epl-v10.html
% *
% *  Contributors:
% *      Texas Instruments - initial implementation
% *
% * --/COPYRIGHT--*/
%/*
% * ======== linkcmd.xdt ========
% *  This is template file is used to generate a linker command file for
% *  executables.  It provides a single place where we can embed information
% *  necessary to load/run executables.
% *
% *  This template is expanded after the configuration script runs and the
% *  results placed in a file (with extension .xdl) associated with the
% *  executable.
% *
% *  Linker templates are passed the following arguments:
% *     $out        - an open file stream for the generated linker
% *                   command file
% *     $args[]     - an array of zero or more libraries that should be linked
% *                   with (in the order they appear in the argument list)
% *
% *  In addition to these arguments, there is a global variable named
% *  'this' that is set as follows:
% *     this        - the program object
% */
%%{
    function genContributions(args)
    {
        var res = "";
        for (var i = 0; i < xdc.om.$packages.length; i++) {
            var pkg = xdc.om.xdc.IPackage.Module($om.$packages[i]);

            var sectFile = pkg.getSects();
            if (sectFile) {
                res += "\n/* Content from " + pkg.$name
                       + " (" + sectFile + "): */\n";
                var tplt = xdc.loadTemplate(sectFile);
                var bout = new java.io.ByteArrayOutputStream();
                var out = new java.io.PrintStream(bout);
                tplt.genStream(out, pkg, args);
                res += bout.toString();
            }
        }
        return (res);
    }
%%}
%var prog = this;    /* meaningful alias for this (== xdc.cfg.Program) */
/*
 * Do not modify this file; it is automatically generated from the template
 * linkcmd.xdt in the devkits.platform package and will be overwritten.
 */

/*
 * put '"'s around paths because, without this, the linker
 * considers '-' as minus operator, not a file name character.
 */
%for (var i = 0; i < prog.$$asmvec.length; i++) {
"`prog.$$asmvec[i]`"
%}

%/* skip big.obj inclusion for devkits since we don't compile big.c */
%for (var i = 0; i < $args.length; i++) {
%     //-l"`$args[i]`"
%}

--args `utils.toHex(prog.argSize)`
-heap  `utils.toHex(prog.heap)`
-stack `utils.toHex(prog.stack)`

/*
 * Linker command file contributions from all loaded packages:
 */
`genContributions($args)`

/*
 * symbolic aliases for static instance objects
 */
%for (var sym in prog.symbol) {
    %var inst = prog.symbol[sym];
    %if (typeof(inst) == 'number') {
`this.build.target.asmName(sym)` = `inst`;
    %}
    %else {
        %var objTab = inst.$module.$name.replace(/\./g, '_') + '_Object__table__V';
        %var off = prog.$capsule.instSize(inst) * inst.$index;
`this.build.target.asmName(sym)` = `this.build.target.asmName(objTab)` + `off`;
    %}
%}

SECTIONS
{
    xdc.meta: type = COPY
}
