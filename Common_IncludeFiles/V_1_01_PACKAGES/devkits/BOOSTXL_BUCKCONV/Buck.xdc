/*!
 *  ======== Buck ========
 *  Config for the PowerSuite Buck
 *
 */
 


metaonly module Buck {

    /*
     * These values are used in #defines in the
     * generated header file:
     *   #define BUCK_PWM_NO
     *   #define ADC_TRIG_SOURCE
     * and used for the modelling of the power stage etc.
     * They are solution/device dependent, i.e. not all of them
     * are used in a generated file.
     */
     
     /* PWM pin and ADC Selection related variables */
        
    config Int pwmIndex = 0;
    config Int pwmNo = 1;
    config Int adcTriggerSource = 5;
	
    config Int adcPinVIN = 0;
    config Int adcPinVINIndex = 0;
    
    config Int adcPinVOUT = 1;
    config Int adcPinVOUTIndex = 1;
    
	config Int adcILIndex = 0;
	config Int adcILPin = 2;
	config Int adcILComparator = 1;
	
	config Int adcPinIin=0;
	config Int adcPinIinIndex=0;
	
	config Int adcPinIL_AVG=0;
	config Int adcPinIL_AVGIndex=0;
	
	config Int adcModuleNo = 0;
    
     /* Power Stage Related Values*/
     //Switching Frequency
    config Int Fsw = 100;
     //Control Frequency
    config Int Fctrl = 100;
	//Input Voltage Nominal
    config Float Vin = 0.0;
    //Output Voltage Nominal
    config Float Vout = 0.0;
    //Output Load Current Nominal
    config Float Iout = 0.0;
    // Max Input Voltage Sense 
    config Float Vin_SenseMax = 13.3;
    // Max Output Voltage Sense
    config Float Vout_SenseMax = 9.76;
    // Max iL sensed Sense
    config Float Il_SenseMax = 5.5;
    config Float Il_TripLevel = 4.0;
	// High side MOSFET Rdson
    config Float Rds1 = 0.0;
    // Low side MOSFET Rdson
    config Float Rds2 = 0.0;
    // Buck output filter inductor
    config Float L = 0.0;
    // DC Resistance of the filter inductor L 
    config Float DCR=0.0;
    // Output filter ceramic capacitor
    config Float Ccer=0.0;
    // Output filter electrolytic capacitor
    config Float Celec=0.0;
    // Output filter ceramic capacitor ESR
    config Float ESRcer=0.0;
    // Output filter electrolytic capacitor ESR
    config Float ESRelec=0.0;
    // Output filter ceramic capacitor ESL
    config Float ESLcer=0.0;
    // Output filter electrolytic capacitor ESL
    config Float ESLelec=0.0;
    // Output Voltage Sense RC Filter Capacitance
    config Int Rfltr_a = 0;
    // Output Voltage Sense RC Filter resistance 
    config Float Cfltr_a = 0.0;
    // Inductor Current Sense RC Filter Capacitance
    config Int Rfltr_b = 0;
    // Inductor Current Sense RC Filter resistance 
    config Float Cfltr_b = 0.0;
    // Input Voltage Resistor Divider
    config Float Ra=0.0;
    // Input Voltage Resistor Divider
    config Float Rb=0.0;
    // Output Voltage Resistor Divider
    config Float Rc=0.0;
    // Output Voltage Resistor Divider
    config Float Rd=0.0;
    // Current sense shunt resistor
    config Float Rcs=0.0;
    // Current sense gain
    config Float I_gain=0.0;
    
    // cut off frequency of the Vout sense filter
    config Float Vout_Sense_Fltr_Cuttoff=0.0;
    // cut off frequency of the IL sense filter
    config Float Il_Sense_Fltr_Cuttoff=0.0;
    
    config String powerStageData = "";
    
    /* compensation related */
	struct COMP_Struct_t {
	Float A0;
	Float A1;
	Float A2;
	Float A3;
	Float B0;
	Float B1;
	Float B2;
	Float B3;
	};
	
    config COMP_Struct_t  COMP[5];

	config Int Fsw_Fctrl_Ratio_Index=0;
	config Int Fsw_Fctrl_Ratio=0;
	
	config Int COMP_NUM_Index=0; 
	config Int COMP_NUM=0; 
	
	config Int INCR_BUILD_Index=0;
	config Int INCR_BUILD=0;
	
    /*!
    /*!
     *  ======== SolutionInited ========
     *  This is set to 'true' after all initialization in Buck.xs
     *  is completed. A listener in {Solution}.js is fired which then inititiates
     *  HTML side initialization
     *  See also: {Solution}.json, {Solution}.js
     *  @_nodoc
     */
    @Transient
    config Bool SolutionInited = false;
    /*!
     *  ======== saveSettings ========
     *  This is set to 'true' when user clicks the 'Save Buck Settings'
     *  button. genProject() in Buck.xs is triggered, and the .h file with
     *  configured settings in it is generated by xdc template generation
     *
     *  @_nodoc
     */
    @Transient
    config Bool saveSettings = false;

    /*!
     *  ======== solution ========
     *  Solution name('Buck', 'ILPFC', etc) derived from $solution.name
     *  read from solution.js in the current CCS project
     *  @_nodoc
     */
    config String solution = "";
    /*!
     *  ======== Type ========
     *  Solution name('VMC', 'CMC', etc) derived from $solution.name
     *  read from solution.js in the current CCS project
     *  @_nodoc
     */
    config String type = "";

    /*!
     *  ======== device ========
     *  Device name derived from the solution name read from solution.js in
     *  the current CCS project
     *  @_nodoc
     */
    config String device = "";

    /*!
     *  ======== execPowerStage ========
     *  Boolean used to trigger function to execute PowerStage
     *  @_nodoc
     */
    @Transient
    config Bool execPowerStage = false;

    /*!
     *  ======== refreshPowerStage ========
     *  Boolean used to trigger function to write PowerStage data to xml file
     *  @_nodoc
     */
    @Transient
    config Bool refreshPowerStage = false;

    /*!
     *  ======== execSFRA ========
     *  Boolean used to trigger function to execute SFRA
     *  @_nodoc
     */
    @Transient
    config Bool execSFRA = false;

    /*!
     *  ======== solutionParams ========
     *  String that contains the contents of solution.js in the
     *  current CCS project
     *  @_nodoc
     */
    @Transient
    config String solutionParams = "";
    
    /*!
     *  ======== projIsInControlSuite ========
     *  Set to true if current  CCS project
     *  is in the controlSUITE installation
     *  @_nodoc
     */
    @Transient
    config Bool projIsInControlSuite = false;
}
